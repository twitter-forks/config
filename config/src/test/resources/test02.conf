zone: atla
env: prod
role: audubon.role.nuthatch

id: nuthatch
name: Nuthatch ${zone} ${env} (Monalert)

include "observability/info"
svcsvc-id: nuthatch

include "observability/notifications"

monitor: {
  actions: {
    runbook: "https://confluence.twitter.biz/display/OBSERVE/Nuthatch+Runbook"
  }
}

key-indicators: [
  {
    name: "Write API"
    monitors: [ ${monitor}{
      name: "success rate from Cuckoo is low"
      query: "zone("${zone}""", 100 * (
        1 - default(0,
          sumany(ts(sum, cuckoo-write, members(audubon.role.observe.cuckoo.prod), keytracker/nuthatch/write/errors/batches/count))
          /
          sumany(ts(sum, cuckoo-write, members(audubon.role.observe.cuckoo.prod), [keytracker/nuthatch/write/ok/batches/count, keytracker/nuthatch/write/errors/batches/count]))
        )
      ))"""
      predicates: {
        critical: "< 98.0 for 15 of 25m"
        warn: "< 99.0 for 15 of 25m"
      }
    },
      ${monitor}{
        name: success rate from Cuckoo has been flaky
        description: Nuthatch's write success has been bad for an extended period of time.
        query: "zone("${zone}""", 100 * (
        1 - default(0,
          sumany(ts(sum, cuckoo, members(audubon.role.observe.cuckoo.prod), keytracker/nuthatch/write/errors/batches/count))
          /
          sumany(ts(sum, cuckoo, members(audubon.role.observe.cuckoo.prod), [keytracker/nuthatch/write/ok/batches/count, keytracker/nuthatch/write/errors/batches/count]))
        )
      ))"""
        predicates: {
          critical: "< 98.0 for 50 of 60m"
          warn: "< 98.0 for 30 of 60m"
        }
      } ]
  },
  {
    name: "Read API"
    monitors: [ ${monitor}{
      name: "success rate from Cuckoo is low"
      query: "zone("${zone}""", 100 * (
        1 - default(0, ts(sum, cuckoo, audubon.role.observe.cuckoo.prod, keytracker/nuthatch/read/fail/requests))
        /
        default(1, ts(sum, cuckoo, audubon.role.observe.cuckoo.prod, keytracker/nuthatch/read/attempted/count))
      ))"""
      predicates: {
        critical: "< 94.0 for 5 of 7m"
        warn: "< 98.0 for 14 of 15m"
      }
    } ]
  }
]

sections: [
  ${application},
  ${manhattan},
  ${jvm},
  ${absorber}
]

application: {
  name: Application
  instruments: [ {
    name: "Read latency (p90) from Cuckoo"
    monitors: [
      ${monitor}{
        name: too high
        query: "zone("${zone}", max(default(0, ts(sum, cuckoo, members(audubon.role.observe.cuckoo.prod), keytracker/nuthatch/nuthatchclient/request_latency_ms.p90))))"
        predicates: { warn: "> 5000.0 for 8 of 10m" }
      }
    ]
  },
    {
      name: "Relative read traffic"
      description: The 5 min moving avg over 5 hr moving avg of key reads
      monitors: [
        ${monitor}{
          name: "increased significantly"
          query: "zone("${zone}""",
          movingavg(5, default(0, ts(sum, cuckoo, audubon.role.observe.cuckoo.prod, keytracker/nuthatch/read/ok/keys))+ default(0, ts(sum, cuckoo, audubon.role.observe.cuckoo.staging, keytracker/nuthatch/read/ok/keys)))
          /
          movingavg(300, default(0, ts(sum, cuckoo, audubon.role.observe.cuckoo.prod, keytracker/nuthatch/read/ok/keys))+ default(0, ts(sum, cuckoo, audubon.role.observe.cuckoo.staging, keytracker/nuthatch/read/ok/keys)))
        )"""
          predicates: { warn: "> 2.5 for 30 of 30m" }
        }
      ]
    },
    {
      name: "Nuthatch QPS from Manhattan"
      monitors: [
        ${monitor}{
          name: "too high"
          query: "zone("${zone}", ts(SUM, manhattan, audubon.role.manhattan.prod.zac.index, manhattan_coordinator_perform_read_count)/ 60)"
          predicates: {
            warn: "> 2500.0 for 10 of 10m"
          }
        }
      ]
    },
    {
      name: "Nuthatch storage"
      monitors: [
        ${monitor}{
          name: "ten nodes unreachable in zac.index"
          predicates: {
            critical: "> 9.0 for 10 of 10m"
            warn: "> 5.0 for 10 of 10m"
          }
          query: "zone("${zone}", ts(AVG, manhattan, audubon.role.manhattan.prod.zac.index, manhattan_internode_unreachable_nodes))"
        }
      ]
    },
    {
      name: "empty sets being served"
      monitors: [
        ${monitor}{
          name: "too many"
          query: "zone("${zone}", sum(default(0, ts(sum, cuckoo, audubon.role.observe.cuckoo.prod, keytracker/read/dark_read/error/nuthatch_returned_zero))))"
          predicates: {
            critical: "> 5000.0 for 8 of 10m"
            warn: "> 600.0 for 8 of 10m"
          }
        }
      ]
    },
    {
      name: "batch update failures"
      monitors: [
        ${monitor}{
          name: "too many: this may trigger on restart - snooze then"
          query: "zone("${zone}", rate(ts(SUM,nuthatch.worker.*, members("${role}"), service/updatebatch/failure)))"
          predicates: {
            critical: "> 5000.0 for 19 of 20m"
            warn: "> 3000.0 for 19 of 20m"
          }
        }
      ]
    } ]
}

manhattan: {
  name: Manhattan
  instruments: [ {
    name: "Manhattan exceptions"
    monitors: [
      ${monitor}{
        name: "too many"
        query: "zone("${zone}""",
          sumany(derive(
            ts(sum, nuthatch.worker.*, """${role}""",
              [manhattan/manhattan/failures, manhattan/manhattan/failfast, manhattan/manhattan/exn, manhattan/nuthatch-manhattan/failures, manhattan/nuthatch-manhattan/failfast, manhattan/nuthatch-manhattan/exn]
            )
          ))
        )"""
        predicates: { warn: "> 4000.0 for 10 of 20m" }
      }
    ]
  } ]
}

jvm: {
  name: "JVM"
  instruments: [
    {
      name: "GC"
      monitors: [
        ${monitor}{
          name: "too much in worker"
          query: "zone("${zone}", default(0, rate(ts(sum, nuthatch.worker.*, members("${role}"), jvm/gc/msec))))"
          predicates: {
            critical: "> 30000.0 for 3 of 3m"
            warn: "> 10000.0 for 3 of 3m"
          }
        },
        ${monitor}{
          name: "too much in router"
          query: "zone("${zone}", default(0, rate(ts(sum, nuthatch.router, members("${role}"), jvm/gc/msec))))"
          predicates: {
            warn: "> 10000.0 for 3 of 3m"
          }
        }
      ]
    }
  ]
}

absorber: {
  include "common/absorber/section"
  zones: ${zone}
  service: "[nuthatch.router, nuthatch.worker.1, nuthatch.worker.2, nuthatch.worker.3]"
  source: members(${role})
}

